///====== Copyright Â© 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Portal game definition file (.fgd) 
//
///=============================================================================

@include "halflife2.fgd"

///=============================================================================
//
// Logical Entities
//
///=============================================================================

@PointClass base(CombineBallSpawners, Parentname, Targetname) studio("models/effects/combineball.mdl") studio("models/editor/cone_helper.mdl") = point_energy_ball_launcher :
	"Launches Aperture Science High Energy Pellets. "
[
	BallLifetime(float) 	: "Ball Lifetime" : 12 : "The time in seconds the ball will live before self-destructing. A negative value will give infinite life, appearing green."
	MinLifeAfterPortal(float) : "Min life after portal transition" : 6 : "When energy balls created by this launcher pass through a portal their life is refreshed to be this number at minimum."
	
	// Inputs
	input LaunchBall(void) 	: "Launch a ball from the spawner."
	input BallCaught(void)  : "Ball this launcher created was 'caught'."

	// Outputs
	output OnPostSpawnBall(void) : "Fired after the ball has spawned."
	output OnBallCaught(void) : "Fired when a ball this entity has launched has been 'caught'."
]

@PointClass base(BasePropPhysics) studio("models/effects/combineball.mdl") = prop_energy_ball :
	"Aperture Science High Energy Pellet. Bounces off surfaces, travels through portals and kills players on contact. After a time period it will explode and be respawned."
[
	// Inputs
	input Explode(void) : "Explode the pellet, creating a shockwave and shaking the camera."
	input BallCaught(void) : "Trigger the OnBallCaught output for the point_energy_ball_launcher that created this ball, kill the pellet and disable the launcher."
]

@PointClass 
	base(Angles, Targetname, Parentname, ResponseContext, Shadow, Reflection, ToggleDraw, RenderFields) 
	studioprop( "models/props_bts/rocket_sentry.mdl" ) 
	= npc_rocket_turret: "P1 rocket sentry, aims a rocket at a target. The rocket itself will often get stuck inside the model, so that needs to be worked around."
[
	spawnflags(Flags) =
	[
		1:  "Start Retracted" : 0
	]

	RocketSpeed(float) : "Rocket Speed" : 450 : "Speed the rocket will travel at."
	RocketLifetime(float) : "Rocket Lifetime" : 20 : "The rocket will automatically detonate after this number of seconds."
	
	input Toggle(void) : "Toggles between activated and deactivated states."
	input Enable(void) : "Activate Rocket Turret, and allow it to begin scanning."
	input Disable(void) : "Deactivate and retract the Rocket Turret."
	input SetTarget(target_destination) : "Sets the target for this turret to attack."
	input Destroy(void) : "Sets this turret to it's destroyed state."

	output OnFoundTarget(void) 	: 	"Fired when the rocket turret finds an unobstructed target."
	output OnLostTarget(void) 	: 	"Fired when turret's target is blocked."
	output OnDeath(void)		:	"Fired after this turret finishes it's destroy think and begins it's death think."
]

@PointClass base(Angles, Targetname, Parentname, ResponseContext, Shadow, Reflection, ToggleDraw, RenderFields) studioprop( "models/props_bts/rocket.mdl") = rocket_turret_projectile : "The rocket the Rocket Sentry fires."
[
	input RemovePaint(void) : "Cleans the rocket?"
	output OnIgnite(void) : "On fire?"
	output OnFizzled(void) : "The rocket has been fizzled."
]

@PointClass base(Targetname, Parentname, Angles) cylinder(255 255 255, targetname, target, radius, targetname, targetname, radius) color(255 192 0) size(16 16 16) = env_portal_path_track : 
	"An entity used to build paths for other entities to follow. Each path_track is a node on the path, each holding the name of the next path_track in the path."
[
	spawnflags(Flags) =
	[
		1:  "Disabled" : 0
		2:  "Fire once" : 0
		4:  "Branch Reverse" : 0
		8:  "Disable train" : 0
		16: "Teleport to THIS path track" : 0
	]
	
	Track_beam_scale(float):"Scale Track FX": 0 :"The amount to scale the track FX size"
	End_point_scale(float) : "Scale Endpoint FX" : 0 : "The amount to scale the endpoint FX size."
	End_point_fadeout(float):"Fade Out Endpoint": 0 :"Amount of time to fade out the endpoint FX"
	End_point_fadein(float):"Fade In Endpoint": 0 :"Amount of time to fade in the endpoint FX"
	target(target_destination) : "Next Stop Target" :  : "The next path_track in the path."
	altpath(target_destination) : "Branch Path" : : "An alternative path_track to be the next node in the path. Useful for making branching paths. Use the ToggleAlternatePath / EnableAlternatePath inputs to make the alternative path active."
	speed(float) : "New Train Speed" : 0 : "When the train reaches this path_track, it will set its speed to this speed. "+
		"This speed must be a positive value that is less than the train's max speed. A value of 0 will cause no change in the train's speed."
	radius(float) : "Path radius" : 0 : "Used by NPCs who follow track paths (attack chopper/gunship). This tells them the maximum distance they're allowed to be from the path at this node."

	orientationtype(choices) : "Orientation Type" : 1 : "The way that the path follower faces as it moves through this path track." =
	[
		0 : "No change"
		1 : "Face direction of motion"
		2 : "Face this path_track's angles"
	]

	// Inputs
	input ToggleAlternatePath(void) : "Cause the track to toggle to/from its alternate path."
	input EnableAlternatePath(void) : "Enable the alternate path of the track."
	input DisableAlternatePath(void) : "Disable the alternate path of the track."

	input TogglePath(void) : "Cause the track to toggle on/off/"
	input EnablePath(void) : "Enable the track."
	input DisablePath(void) : "Disable the track."

	input ActivateTrackFX(void) : "Turn on the track's fx beam"
	input ActivateEndPointFX(void) : "Turn on the endpoint's fx"
	input DeactivateTrackFX(void) : "Turn off the track's fx beam"
	input DeactivateEndPointFX(void) : "Turn off the endpoint's fx"

	// Outputs
	output OnPass(void) : "Fired when any entity following this path passes this path_track node."
]

///=============================================================================
//
// Brush Entities
//
///=============================================================================

@SolidClass base(Reflection, Trigger, Targetname) = trigger_portal_cleanser : 
	"An Aperture Science Material Emancipation Grid."
[
	input FizzleTouchingPortals(void) : "Cause any portals in our volume to immediately fizzle."
	
	Visible(boolean) : "Visible" : "1" : "If the fizzler is visible."
	UseScanline(boolean) : "Use Scanline" : "1" : "If the field uses a scanline particle effect."	

	// Outputs
	output OnDissolve(void) : "Fired whenever an entity is dissolved."
	output OnFizzle(void) : "Fired whenever an portals are fizzled."
	output OnDissolveBox(void) : "This cleanser dissolved an entity with targetname equal to 'Box.'"
]

@SolidClass base(Targetname, Parentname, EnableDisable ) = func_portal_orientation : 
	"Adjusts a portal's rotation to match a specified angle. The 'Bottom' of the portal points in the specified direction."
[
	AnglesToFace(angle) : "Angles to face" : "0 0 0" : "The 'floor' of the portal pair linkage will be in this direction."
	MatchLinkedAngles(choices) : "Match linked angles." : 0 : "If set, portals placed in this volume will have their angles match their linked portals. This only works for floor or ceiling portals with a currently linked partner."=
	[
		0 : "False"
		1 : "True"
	]
]

@SolidClass base(Targetname) = func_weight_button : "A button which activates after a specified amount of weight is applied. Likely useless."
[
	WeightToActivate(float) 	: "Amount of weight required before this button activates."

	//Outputs
	output OnPressed(void)		: "Fired when the button is touching enough weight."
	output OnReleased(void)		: "Fired when the button was pressed, but weight was removed."
]

@SolidClass base(Targetname, Parentname, Origin) = func_noportal_volume : "A region which prevents portal placement."
[	
	//Inputs
	input Deactivate(void)		: "Turn off blocking functionality"
	input Activate(void)		: "Turn on blocking functionality"
	input Toggle(void)		: "Toggle blocking functionality"

	spawnflags(Flags) = 
	[
		1: "Start inactive" : 0
	]
]

@SolidClass base(Targetname, Parentname, Origin) = func_portal_bumper : "A region which 'bumps' portals outside of it, but will still allow portals to be placed on it."
[	
	//Inputs
	input Deactivate(void)	: "Turn off bumping functionality"
	input Activate(void)		: "Turn on bumping functionality"
	input Toggle(void)		: "Toggle bumping functionality"

	spawnflags(Flags) = 
	[
		1: "Start inactive" : 0
	]
]


@SolidClass base(Targetname, Origin, Parentname) = func_portal_detector : "A region that fires an output if a portal is placed inside it."
[	
	//Inputs
	input Disable(void)		: "Turn off detecting functionality"
	input Enable(void)		: "Turn on detecting functionality"
	input Toggle(void)		: "Toggle detecting functionality"

	output OnStartTouchPortal(void) 			: "Fired when any portal touches the detector."	
	output OnEndTouchPortal(void) 				: "Fired when any portal leaves the detector bounds."
	output OnStartTouchPortal1(void)			: "Fired when the Blue portal is placed intersecting the portal detector."
	output OnStartTouchPortal2(void)			: "Fired when the Orange portal is placed intersecting the portal detector."
	output OnStartTouchLinkedPortal(void)		: "Fired when linked portal is placed intersecting the portal detector."
	output OnStartTouchBothLinkedPortals(void)	: "Fired when both of a pair of portals is placed intersecting the portal detector."
	output OnEndTouchPortal1(void)				: "Fired when the Blue portal has left the volume of the detector"
	output OnEndTouchPortal2(void)				: "Fired when the Orange portal has left the volume of the detector"
	output OnEndTouchLinkedPortal(void)			: "Fired when a portal with a linked partner has left the volume of the detector"
	output OnEndTouchBothLinkedPortals(void)	: "Fired when both portals have left the volume of the detector"

	spawnflags(Flags) = 
	[
		1: "Start inactive" : 0
	]
	LinkageGroupID(integer) : "Portal pair ID that it detects" : 0
	CheckAllIDs(boolean) : "Check all portals" : 0 : "Ignore the Group ID and check for all portals."
]


///=============================================================================
//
// Model Entities
//
///=============================================================================

@BaseClass = PortalBase
[ 
	output OnPlacedSuccessfully(void)	: "When a portal is placed without failure, this output is fired."
	output OnEntityTeleportFromMe(void)		: "When any entity is teleported from this portal to the linked partner."
	output OnPlayerTeleportFromMe(void)		: "When the player is teleported from this portal to the linked partner."
	output OnEntityTeleportToMe(void)		: "When any entity is teleported from this linked partner to the portal."
	output OnPlayerTeleportToMe(void)		: "When the player is teleported from this linked partner to the portal."
	
	Activated(choices)			: "Start Activated" : 0 : "An inactive portal will not be drawn and will not teleport entities."	=
	[
		0 : "Inactive"
		1 : "Active"
	]
	PortalTwo(choices)			: "Portal Number" : 0 : "Which of the pair is this portal?" =
	[
		0 : "Portal 1 (Blue)"
		1 : "Portal 2 (Orange)"
	]
	
	HalfWidth(float)			: "Half-Width of the Portal." : 0
	HalfHeight(float)		: "Half-Height of the Portal." : 0
]

@PointClass base(Targetname, Angles, PortalBase) studio("models/editor/prop_portal.mdl") bbox(-32, -16, -64, 32, 16, 64) = prop_portal : "A portal."
[
	LinkageGroupID(integer)		: "Portal Group" : 0 : "Portal pair ID that it belongs to, 0=SP, 1=ATLAS, 2=P-Body"
	
	skin(choices)				: "Hammer Skin" : 1 : "Which portal to show as?" =
	[
		0 : "Blue Portal"
		1 : "Orange Portal"
		2 : "Generic Portal"
	]

	input SetName(string)           : "Naming your portals is fun"
	input SetActivatedState(bool)   : "An inactive portal will not be drawn and will not teleport entites"
	input Fizzle(void)              : "Makes a cool visual fizzle and properly shuts down the portal"
	input NewLocation(string)       : "Sets this portals location and angles. This expects 6 floats with space delimiters, the format is 'x y z pitch yaw roll'"
	input Resize(string)            : "Resizes the portal. Format is 'halfwidth halfheight'"
	input SetLinkageGroupId(integer): "Sets the portal linkage ID.  If portal is open it will close and reopen with new portal linked."	
]

@PointClass base(Weapon,Targetname, Parentname) studioprop("models/weapons/w_portalgun.mdl") = weapon_portalgun : "Aperture Science Handheld Portal Device"
[
	CanFirePortal1(boolean)			: "Can Fire Portal 1" : 1 : "Can this portalgun create blue portals?"
	CanFirePortal2(boolean)			: "Can Fire Portal 2" : 1 : "Can this portalgun create orange portals?"
	ShowingPotatos(boolean)			: "Show PoTaToS" : 0 : "Show PoTaToS on the portal gun."

	StartingTeamNum(choices) : "Player" : 0 : "Which player this gun belongs to.  Will decide which portals it fires before being picked up, as well as the skin." =
	[
		0 : "Chell/Bendy"
		2 : "P-Body"
		3 : "ATLAS"
	]
	
	skin(choices) : "[H] Stripes" : 0 : "Which stripes to show in Hammer." =
	[
		0 : "None"
		1 : "Blue"
		2 : "Orange"
	]

	input ChargePortal1(void)			: "Does charge up effect for mounted portalgun. Missing particles and sounds."
	input ChargePortal2(void)			: "Does charge up effect for mounted portalgun. Missing particles and sounds."

	input FirePortal1(void)				: "Projects 'blue' portal onto a wall in the facing direction of the gun."
	input FirePortal2(void)				: "Projects the 'orange' portal onto a wall in the facing direction of the gun."

	input FirePortalDirection1(vector)	: "Fires the 'blue' portal in the specified direction."
	input FirePortalDirection2(vector)	: "Fires the 'orange' portal in the specified direction."

	output OnFiredPortal1(void)			: "Fires when the 'blue' portal is fired."
	output OnFiredPortal2(void)			: "Fires when the 'orange' portal is fired."
]

@PointClass base(BasePropPhysics) studioprop() studioprop( "models/npcs/personality_sphere/personality_sphere.mdl" ) = prop_glados_core : "The P1 personality cores for GlaDOS. Resemble little eyeballs with handles. These play lines and look around when near the player. All lines and models would need to be ported for this to work correctly."
[
	CoreType(choices) : "Core Personality" : 1 : "Which personality VO set the core is set to." =
	[
		0 : "Curious"
		1 : "Aggressive"
		2 : "Crazy"
		3 : "None"
	]
	
	DelayBetweenLines(float) : "Pause (in secs) between VO Lines." : "0.4" : "When the core is talking, this is the number of seconds delay between it's spoken lines."
	
	input Panic(void)			: "Core is near death, panic."
	input StartTalking(void)		: "Start playing lines, play looking animations."
	
	output OnPlayerPickup(void)	: "Player picked up core."
]

@PointClass base(Targetname, Angles) studioprop() sphere(turretRange) frustum(45,16,TurretRange,255 0 0 100,-1) = npc_portal_turret_floor : "Aperture Science Sentry Turret."
[
	spawnflags(Flags) = 
	[
		32 : "Start Active" : 0
		64 : "Start Inactive" : 0
		128 : "Fast Retire" : 0
		256 : "Out of Ammo" : 0
	]
	
	ModelIndex(choices) : "Model" : 0 : "Which model the turret uses. The skeleton turret is still functional." =
	[
		0 : "Normal"
		1 : "Custom Model"
		2 : "Box"
		3 : "Backwards"
		4 : "Skeleton"
	]
	SkinNumber(choices) : "Skin" : 0 : "Set the skin used for the turret. Only useful on normal (for a destroyed variant) or custom turrets." =
	[
		0 : "Normal"
		1 : "Destroyed"
	]

	Gagged(boolean) : "Gag Turret" : 0 : "Turret will not speak any lines."
	UsedAsActor(boolean) : "Used As Actor" : 0 : "Turret will not run the standard floor turret code so it can be used as an actor."
	PickupEnabled(boolean) : "Turret Pickup Allowed" : 1 : "Disables pickup by player."
	DisableMotion(boolean) : "Disable Motion" : 0 : "Set for turrets that can't move in the world."
	AllowShootThroughPortals(boolean) : "Allow Shooting Through Portals" : 0 : "Turrets will not try to shoot through portals unless this is set."
	TurretRange(float) : "Maximum Range" : 1024 : "How far the turret will be able to see targets."
	LoadAlternativeModels(boolean) : "Load Defective Models" : 0 : "Should this turret precache the defective models? Needed for late switching."
	UseSuperDamageScale(boolean) : "Use Super Damage" : 0 : "Setting this to true will scale the turret's damage by a very large amount."
	DamageForce(boolean) : "Damage Pushes Player" : 0 : "Being hit by this turret will push the player back."
	
	CollisionType(choices) : "Collision Type" : 0 : "Allow collision with the player to be turned off for very special cases." =
	[
		0 : "Normal"
		1 : "Debris"
	]
	
	model(choices) : "Custom Model" : "models/npcs/turret/turret.mdl" : "The model to show as in Hammer, or a custom model to use." =
	[   
		"models/npcs/turret/turret.mdl" 			: "Normal"
		"models/npcs/turret/turret_boxed.mdl"		: "Box"
		"models/npcs/turret/turret_backwards.mdl" 	: "Backwards"   
		"models/npcs/turret/turret_skeleton.mdl"	: "Skeleton"
	]
	
	skin(integer) : "[H] Skin" : 0 : "The skin to show, mainly for the normal model." 

	input Toggle(void)					: "Toggle enabled state."
	input Enable(void)					: "Enable the turret."
	input Disable(void)					: "Disable the turret."
	input DepleteAmmo(void)				: "Depletes all the ammo from a turret, causing it to dry-fire."
	input RestoreAmmo(void)				: "Restores ammo to a turret, allowing it to fire live rounds again."
	input FireBullet(string)			: "Causes the turret to instantly fire at the specified entity."
	input EnableGagging(void)			: "Prevents the turret from speaking any lines."
	input DisableGagging(void)			: "Allows the turret to speak again."
	input EnablePickup(void)			: "Enables player pickup of the turret."
	input DisablePickup(void)			: "Disables player pickup of the turret."
	input SelfDestruct(void)			: "Causes the turret to play lines, ignite and then explode."
	input SelfDestructImmediately(void) : "Cause the turret to explode immediately."
	input SetAsBouncePainted(void)		: "Force this turret to be painted with bounce paint."
	input EnableMotion(void) 			: "Enable physics motion."
	input DisableMotion(void) 			: "Disable physics motion."
	input SetModel(integer)				: "Change the model, where the parameter is an integer from 0-4. Requires the Load Defective Models keyvalue to be true!"
	
	output OnDeploy(void)				: "Turret has seen the player and is deploying its arms."
	output OnRetire(void)				: "Turret has lost sight of the player and is returning to sleep mode."
	output OnTipped(void)				: "Turret has been tipped over and 'died'."
	output OnExplode(void)				: "Turret has exploded."
	output OnPhysGunPickup(void)		: "Turret was picked up by player."
	output OnPhysGunDrop(void) 			: "Turret was dropped by player."
	output OnPainted(void)				: "Fires when the turret is first painted or if repainted by a different color."
]

@PointClass 
	base(Targetname, Angles, Studiomodel)
	studioprop("models/props/security_camera.mdl") 
	= npc_security_camera : "Security Camera. Follows either the player or their pings. When a portal is opened behind it it will fall off the wall. If gestured to in Coop the player's camera will switch to looking out of the camera lens, with a viewfinder effect."
[
	spawnflags(Flags) = 
	[
		32 : "Start Active" : 1
	]	
	
	LookAtPlayerPings(choices) : "Target" : "0" : "Target to follow: the player, or their pings (co-op mode only)" =
	[
		0 : "Players"
		1 : "Pings"
	]
	TeamToLookAt(choices) : "Ping Type To Follow" : 1 : "Which player's pings to look at." =
	[
		1 : "Both"
		2 : "P-Body"
		3 : "ATLAS"
	]
	
	TeamPlayerToLookAt(choices) : "Player To Follow" : 0 : "Which player the camera should follow." =
	[
		0 : "Both"
		2 : "P-Body"
		3 : "ATLAS"
	]
	
	// Inputs
	input Enable(void) : "Start following players."
	input Disable(void) : "Stop following players, freezing in place."
	input Toggle(void) : "Toggle following players."
	input Ragdoll(void) : "Knock the camera off the wall."
	
	input LookAtBlue(void) : "Make the camera only follow ATLAS."
	input LookAtOrange(void) : "Make the camera only follow P-Body."
	input LookAllTeams(void) : "Make the camera follow all players."

	// Outputs
	output OnDeploy(void) : "Camera is becoming active and dangerous."
	output OnRetire(void) : "Camera is becoming inactive and harmless."
	output OnTaunted(void) : "A player STARTED taunting the camera."
	output OnTauntedBlue(void) : "ATLAS STARTED taunting the camera."
	output OnTauntedOrange(void) : "P-Body STARTED taunting the camera."
	output OnTauntedFinished(void) : "A player FINISHED taunting the camera."
	output OnTauntedBlueFinished(void) : "ATLAS FINISHED taunting the camera."
	output OnTauntedOrangeFinished(void) : "P-Body FINISHED taunting the camera."
]

@PointClass base(Targetname, Angles, Studiomodel) studioprop() = prop_telescopic_arm : "Telescopic Arm. Useless."
[
	input Enable(void) : "Enable Thumper"
	input Disable(void) : "Disable Thumper"

	input SetTarget(target_destination) : "Set the entity to target."
	input TargetPlayer(void) : "Set the player as the entity to target."

	output OnFoundTarget(void)  : "Arm has direct LOS to target entity."
	output OnLostTarget(void)   : "Arm has lost direct LOS to target entity."
]

@PointClass base(Targetname, Angles, Parentname, Global) studioprop( "models/props/Round_elevator_body.mdl" ) = prop_portal_stats_display : "Portal Stats Display. For P1's challenge mode."
[
	input Enable(void) : "Turn on and display the current stats"
	input Disable(void) : "Turn off stats display"

	input UpdateStats(void) : "Updates the stats to the player's current level stats"
	input ResetPlayerStats(void) : "Resets the curret level stats of the player"

	output OnMetPortalObjective(void)  : "Fired when enabled and player met the number of portal placements."
	output OnMetStepsObjective(void)  : "Fired when enabled and player met the number of foot steps."
	output OnMetSecondsObjective(void)  : "Fired when enabled and player met the number of seconds."
	output OnFailedAllObjectives(void)  : "Fired when enabled and player met no objectives."
]

@PointClass base(Targetname, Angles, Parentname) studio("models/editor/vgui_arrows.mdl") = vgui_neurotoxin_countdown : "Neurotoxin Countdown display. AddOutput can be used to change/reset timer countdown."
[
	width(integer) : "Panel width" : 256 : "Width of the screen in units."
	height(integer) : "Panel height" : 128 : "Height of the screen in units."
	countdown(integer) : "Countdown time" : 60 : "Countdown time in seconds."

	input Enable(void) : "Start/Show countdown."
	input Disable(void) : "Hide coundown, will not reset."
]


///=============================================================================
//
// Special Effects
//
///=============================================================================

@PointClass base(Angles,Targetname,Parentname) = env_lightrail_endpoint : "Special effects for the endpoints of the Unstationary Scaffold."
[
	spawnflags(Flags) = 
	[
		1 : "Start On (w/ Small FX)" : 0
		//2 : "Start With Large FX" : 0
	]

	small_fx_scale(float) : "Scale Small FX" : 1 : "Scale of the small effect.  1 is the default size, 2 is twice that, etc."

	large_fx_scale(float) : "Scale Large FX" : 1 : "Scale of the large effect.  1 is the default size, 2 is twice that, etc."

	// Inputs
	input StartCharge(float) : "Start charging the endpoint from the small to large state over a specified amount of seconds."
	input StartSmallFX(void) : "Start discharging particles at the small effects state over specified number of seconds."
	input StartLargeFX(void) : "Start discharging particles at the large effects state over specified number of seconds."	
	input Stop(float) : "Stops the effect at any point."
]


///=============================================================================
//
// Credits
//
///=============================================================================

@PointClass base(Targetname) color(200 0 0) size(-8 -8 -8, 8 8 8) = env_portal_credits : 
	"An entity to control the rolling credits for portal."
[
	// Inputs
	input RollCredits(void) : "Start the intro credits rolling."
	input RollOutroCredits(void) : "Start the outro credits rolling."
	input ShowLogo(void) : "Show the HL2 logo."
	input RollPortalOutroCredits(void) : "Start the Portal greenscreen outro credits."
	
	// Outputs
	output OnCreditsDone(void)  : "Fired when the credits having finished rolling."
]



///=============================================================================
//
// Normally Obsolete..
//
///=============================================================================

@PointClass base(Targetname, Parentname) iconsprite("editor/info_lighting.vmt") = info_lighting_relative
[
	LightingLandmark(target_destination) : "Lighting Landmark" :  : "Entity at which the reference origin is contained. " +
									" If empty, the info_lighting_relative's origin will" +
									" be used."
]



@PointClass base(Targetname, Parentname, Studiomodel, Angles) studioprop() = prop_mirror : "A basic mirror model"
[
	Width(float) : "Width" : "64.0" : "The width of the mirror when there's no model"
	Height(float) : "Height" : "108.0" : "The height of the mirror when there's no model"
	PhysicsEnabled(boolean) : "Physics" : 0 : "Move physically"
]

@NPCClass base(Parentname, BaseNPC) iconsprite("editor/bullseye.vmt") color(255 0 0) = npc_bullseye : "Dummy NPC for targeting or other behavior."
[
	health(Integer) : "Health" : 35 : "Unlike other NPCs level designers are allowed to set the health on bullseyes."

	minangle(string) : "Minimum Angle" : "360" : "Angle from the bullseye required for bullseye to be a valid enemy."
	mindist(string) : "Minimum Distance" : "0" : "Distance from the bullseye required for bullseye to be a valid enemy."
	alwaystransmit(boolean) : "Always Transmit To Client" : "0" : "Always transmit this entity to the client."

	autoaimradius(float) : "Autoaim Radius" : "0" : "Radius of autoaim influence. Use ent_autoaim <picker> to visualize."

	spawnflags(Flags) = 
	[
		65536   : "Not Solid" : 0
		131072  : "Take No Damage" : 0
		262144  : "Enemy Damage Only" : 0
		524288  : "Bleed" : 0
		1048576 : "Perfect Accuracy" : 0
		2097152 : "Collide against physics objects (Creates VPhysics Shadow)" : 0
	]
	output OnTargeted(void) : "Fires when targeted"
	output OnReleased(void) : "Fires when no longer targeted"
]
