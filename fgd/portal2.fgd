//====== Copyright Â© 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Aperture entity declarations
//
//=============================================================================

 @include "base.fgd"
 @include "halflife2.fgd"
 @include "portal.fgd"

@SolidClass base(Targetname, ResponseContext) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
	paintinmap(choices) : "Enable Paint" : 0 : "Enable code for spreading paint on surfaces, and bouncing physics objects around." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	maxblobcount(integer) : "Gel Blob Limit" : 250 : "Number of Gel blobs that can exist. Maximum is 250."
	
	message(string) : "Map Description / Title"
	skyname(string) : "SkyBox" : "sky_black_nofog" : "Texture used for the 2D skybox."
	chaptertitle(string) : "Chapter Title Message" : "" : "Chapter Title that appears onscreen when this level starts."
	startdark(boolean) : "Level Fade In" : 0
	gametitle(boolean) : "Display Game Title" : 0 : "Game Title that appears onscreen when this level starts."

	newunit(choices) : "New Level Unit" : 0 : "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels." = 
	[
		0 : "No, keep current"
		1 : "Yes, clear previous levels"
	]
	maxoccludeearea(float) : "Max occluder area" : "0" : "[Used on PC] Prevents occlusion testing for entities that take up more than X% of the screen." 
	minoccluderarea(float) : "Min occluder area" : "0" : "[Used on PC] Prevents occluders from being used if they take up less than X% of the screen." 
	maxpropscreenwidth(float) : "Start Fade Pixels" : -1 : "Number of pixels wide at which all props in the level start to fade (<0 = use fademaxdist). This number is ignored if the prop has a specific fade distance specified."
	minpropscreenwidth(float) : "End Fade Pixels" : 0 : "Minimum number of pixels wide at which the prop is visible (0 = don't fade out). This number is ignored if the prop has a specific fade distance specified."
	detailvbsp(string) : "Detail.vbsp file" : "detail.vbsp" : "Detail.vbsp file to use for emitting detail props (found in directory <root>/modname)"
	detailmaterial(material) : "Detail material file" : "detail/detailsprites" : "Material for detail sprites to use for drawing detail props."
	coldworld(boolean) : "World is cold" : 0 : "Emit steam from NPC's mouths and similar effects."
	maxoccludeearea_x360(float) : "Max occluder area (Xbox)" : "0" : "[Used on 360] Prevents occlusion testing for entities that take up more than X% of the screen." 
	minoccluderarea_x360(float) : "Min occluder area (Xbox)" : "0" : "[Used on 360] Prevents occluders from being used if they take up less than X% of the screen."
]

@BaseClass = LinkedPortalDoor : "An entity that can be linked to another door and create a passage between them dynamically."
[
	input SetPartner(target_destination) : "Set a new partner door."
	input Open(void) : "Open the door and cause the portal to activate."
	input Close(void) : "Close the door and cause the portal to deactivate."

	output OnOpen(void) : "Called when the door has started its open animation."
	output OnClose(void) : "Called when the door has started its close animation."
	output OnEntityTeleportFromMe(void)		: "When any entity is teleported from this portal to the linked partner."
	output OnPlayerTeleportFromMe(void)		: "When the player is teleported from this portal to the linked partner."
	output OnEntityTeleportToMe(void)		: "When any entity is teleported from this linked partner to the portal."
	output OnPlayerTeleportToMe(void)		: "When the player is teleported from this linked partner to the portal."
]

@BaseClass = BaseProjector : "The base for all the different projectors (wall & tractor beam)."
[
	StartEnabled(boolean) : "Start Enabled" : 1 : "If the projector should start enabled."
	
	DisableHelper(boolean) : "Disable Placement Helper" : 0 : "Disable the automatically created placement helper to prevent it from fighting with a custom one."
	
	input Enable(void) : "Enables projection from this projector. This also updates the position of the bridge/funnel if the model was parented."
	input Disable(void) : "Disables projection from this projector."
	
	input SetParent(target_destination) : "Sets the parent for the projector. This will only move the model properly, retrigger the enable input to correct the bridge/funnel position."
	input SetParentAttachment(string) : "Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment."
	input SetParentAttachmentMaintainOffset(string) : "Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached."
	input ClearParent(void) : "Removes this entity from the the movement hierarchy, leaving it free to move independently."
]

@BaseClass = BasePortButton : "The base for the various floor buttons - weighted, cube, sphere and Antique weighted."
[
	SuppressAnimSounds(boolean) : "Suppress Animation Sounds" : 0 : "Prevent the model from playing any sounds."
	input PressIn(void) : "Activate the button as if it was pressed, sending it to the bottom position."
	input PressOut(void) : "Release the button, sending it to the top position."
	output OnPressed(void) : "Called when the button has been pressed."
	output OnUnPressed(void) : "Called when the button has been released."
]

@BaseClass = BasePedButton : "The base for the prop_button/prop_under_button."
[
	Delay(float) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again."
	istimer(boolean) : "Play timer sound?" : 0 : "If set, this button will play timer sounds while button is depressed. This allows fast reset by default - use Prevent fast reset to stop this."
	preventfastreset(boolean) : "Prevent fast reset?" : 0 : "Buttons that are timer's allow you to reset early - use this to make the button stick for the entire duration."
	
	solid(boolean) : "Is Solid" : 1 : "Makes button able to be passed through."
	input Press(void) : "Cause the button to be pressed."
	input Lock(void) : "Locks the button."
	input UnLock(void) : "UnLocks the button."
	input CancelPress(void) : "Causes the button to reset quietly and without firing OnButtonReset outputs."
	
	output OnPressed(void) : "Called when the button has been pressed."
	output OnPressedBlue(void) : "Called in Coop when the button has been pressed by the Blue player."
	output OnPressedOrange(void) : "Called in Coop when the button has been pressed by the Orange player."
	output OnButtonReset(void) : "Called when the button has reset after being pressed."
]

@BaseClass = BasePaintType : "Paint Type property."
[
	PaintType(choices) : "Paint Type" : 0 : "The type of Gel created." = 
	[
		0 : "Repulsion Gel"
		1 : "Reflection Gel / Adhesion Gel"
		2 : "Propulsion Gel"
		3 : "Conversion Gel"
		4 : "Cleansing Gel"
	]
	skin(choices) : "[H] Paint Type" : 0 : "The type of gel created (for display)." = 
	[
		0 : "Repulsion Gel"
		1 : "Reflection Gel / Adhesion Gel"
		2 : "Propulsion Gel"
		3 : "Conversion Gel"
		4 : "Cleansing Gel"
	]
]

@PointClass base(Targetname) sphere(radius) = info_target_personality_sphere : "Personality Sphere Info Target"
[
	sphereLine(string) : "Sphere Line" : "" : "Line sphere will speak when we are looking at this target."
	radius(float) : "Radius" : 16 : "Radius of this object. "
]

@PointClass base(Targetname, Parentname, Angles) studioprop("models/props/tripwire_turret.mdl") = prop_rocket_tripwire : 
	"A stationary rocket turret that fires a rocket when players walk in front of it."
[
	RocketSpeed(float) : "Rocket Speed" : 450 : "Speed the rocket will travel at."
	RocketLifetime(float) : "Rocket Lifetime" : 20 : "The rocket will automatically detonate after this number of seconds."
	input ForceFire(void) : "Forces the rocket turret to fire."
	
	StartDisabled(choices) : "Initial State" : 0 =
	[
		0 : "Enabled"
		1 : "Disabled"
	]

	output OnTripped(void)		 	: 	"Fires when the laser has been tripped"
	output OnRocketExplode(void) 	: 	"Fires when the rocket explodes."
	
	input EnableTripwire(void) 		: "Enables the rocket turret."
	input DisableTripwire(void)		: "Disables the rocket turret."
]

@PointClass base(BasePropPhysics, RenderFields) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_physics :
	"A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges "+
	"or other constraints. It can also be configured to break when it takes enough damage. "+
	"Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. "+
	"If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it CANNOT be "+
	"used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_physics_override instead."
[
	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into a portal."
]

@PointClass base(BasePropPhysics) studioprop() sphere(fademindist) sphere(fademaxdist) = prop_physics_override :
	"A variant of prop_physics which will permit using models that do not have physics data compiled into them, like static or dynamic models. Health can be overridden on this version."
[
	health(integer) : "Health" : 0 : "Number of points of damage to take before breaking.  0 means don't break."
	
	// Inputs
	input Ignite(void) : "Ignite, burst into flames."
	input IgniteLifetime(float) : "Ignite, with a parameter lifetime."
	input IgniteNumHitboxFires(integer) : "Ignite, with a parameternumber of hitbox fires."
	input IgniteHitboxFireScale(float) : "Ignite, with a parameter hitbox fire scale."
]

@PointClass base(BasePropPhysics, RenderFields) studioprop() sphere(fademindist) sphere(fademaxdist) = simple_physics_prop :
	"Unknown use. "
[
	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into a portal."
]

@SolidClass base(Targetname) = func_camera_target :
	"Used to produce perfectly reflective glass that renders world + entities."
[
]

@PointClass 
	base(Targetname, Parentname, Angles, LinkedPortalDoor, ToggleDraw, RenderFields)
	line(255 255 0, targetname, partnername)
	studio("models/editor/axis_helper_thick.mdl")
	iconsprite("editor/portal_dual.vmt") = linked_portal_door :
"A door which is linked by a portal to another 'linked_portal_door' entity. Portal shots will pass through, and no effect appears at the edges."
[
	partnername(target_destination) : "Linked Partner" : : "Another 'linked_portal_door' entity which will link to this one."
	 width(integer) : "Half-Width  (G)" : 64 : "Half the width of the portal, on the Green axis."
	height(integer) : "Half-Height (B)" : 64 : "Half the height of the portal, on the Blue axis."
	startactive(boolean) : "Start Active" : 0 : "Whether to start the linkage as active from the start (Useless)."
]

@PointClass base(Targetname, Parentname, Angles, LinkedPortalDoor) studioprop("models/props/portal_door.mdl") line(255 255 0, targetname, partnername) line(255 255 0, targetname, lightingorigin) = prop_linked_portal_door :
"A door which is linked by a portal to another 'prop_linked_portal_door' entity. This is premade at the correct size to allow portaling though the included door. It appears as a grey door."
[
	partnername(target_destination) : "Linked Partner" : : "Another 'prop_linked_portal_door' entity which will link to this one."
	lightingorigin(target_destination) : "Lighting Origin" : "" : "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."

	output OnFullyOpen(void) : "Called when the door has finished its open animation."
	output OnFullyClosed(void) : "Called when the door has finished its close animation."
]

@PointClass base(Targetname, Parentname, Angles , ToggleDraw, RenderFields, BasePedButton) studioprop() = prop_button :
"A button which is activated by player use or by game inputs. While pressed it can play a tick-tock sound to indicate limited time."
[	
	skin(choices) : "Skin" : 0 : "Should it appear dirty or clean?" =
	[
		0 : "Clean"
		1 : "Dirty"
	]	
]

@PointClass base(Targetname, Parentname, Angles , ToggleDraw, RenderFields, BasePedButton) studioprop("models/props_underground/underground_testchamber_button.mdl") = prop_under_button :
 "A button which is activated by player use or by game inputs, for use in underground test chambers. Uses different press/release sounds compared to the modern one. The same tick-tock noise is used to indicate limited time."
[
]

@PointClass base(Targetname, Parentname, Angles, ToggleDraw, RenderFields, BasePortButton) studioprop() = prop_floor_button :
"A 1500 MegaWatt Aperture Science Super-Colliding Super Button, which is pressed by a player or objects."
[
	model(studio) : "Button model" : "models/props/portal_button.mdl"
	output OnPressedBlue(void) : "Called in Coop when the button has been pressed by ATLAS."
	output OnPressedOrange(void) : "Called in Coop when the button has been pressed by P-Body."
]

@PointClass base(Targetname, Parentname, Angles, ToggleDraw, RenderFields, BasePortButton) studioprop() = prop_floor_cube_button :
"A floor button which is activated by a prop_weighted_cube."
[
	model(studio) : "Button model" : "models/props/box_socket.mdl" : "Model for the Cube Button. Custom models can be used."
	AcceptsBall(boolean) : "Accepts Balls" : 0 : "Do Edgeless Safety Cubes activate this? Should almost always be No unless no balls are in the map."
]

@PointClass base(Targetname, Parentname, Angles, ToggleDraw, RenderFields, BasePortButton) studioprop("models/props/ball_button.mdl") = prop_floor_ball_button :
"A floor button which is only activated by a Sphere-type prop_weighted_cube."
[
]

@PointClass base(Targetname, Parentname, Angles, ToggleDraw, RenderFields, BasePortButton) studioprop("models/props_underground/underground_floor_button.mdl") = prop_under_floor_button :
"A floor button which is activated by a player or objects, for use in the underground test chambers. It plays different sounds, and has a rectangular trigger area."
[
	output OnPressedBlue(void) : "Called in Coop when the button has been pressed by ATLAS."
	output OnPressedOrange(void) : "Called in Coop when the button has been pressed by P-Body."
]

@PointClass base(Targetname, Angles, BaseProjector, ToggleDraw, RenderFields) studioprop("models/props/wall_emitter.mdl") = prop_wall_projector : "Aperture Science Hard Light Bridge Projector. Note: To avoid lag when it first turns on, place an info_particle_system to precache 'projected_wall_impact'."
[
	skin(choices) : "Skin" : 0 : "Which skin to use." =
	[
		0 : "Clean"
		1 : "Rusted"
	]
]

@PointClass base(Targetname, Angles) = projected_wall_entity : "A Hard Light Bridge. Probably not spawnable in Hammer. Can be detected with triggers that have the 'Everything' flag set."
[

]

@PointClass base(Targetname, Parentname, Angles, EnableDisable) line(255 255 0, targetname, proxy_name) line(255 255 0, targetname, attach_target_name) sphere(radius, 255 128 0) studio("models/editor/placement_helper.mdl") = info_placement_helper : "Portal Placement Helper, indicates where portals will snap to. The arrow points to the 'up' diection for the portal."
[
	radius(float) : "Radius" : 16 : "Radius in which to influence placement."
	proxy_name(target_destination) : "Proxy Entity Name" : : "Name of the entity we want to use for our real placement position."
	attach_target_name(target_destination) : "Attach Entity Name" : : "Name of the entity we want to force our attachment to. Ensures this applies to the correct brush. Needs parent!"

	snap_to_helper_angles(boolean) : "Use helper's angles" : 0 : "Portals will lock to the angles, instead of rotating in all directions.."

	force_placement(boolean) : "Force Placement" : 1 : "Ignores placement rules when placing at this helper."

	output OnObjectPlaced(void) : "A portal has been successfully placed using us as a guide."
	output OnObjectPlacedSize(integer) : "When a portal is successfully placed, this sends the scale level as an out value"
]

@PointClass base(Targetname) iconsprite("editor/info_target.vmt") line(255 255 0, targetname, functankname) = info_player_ping_detector : "Player Ping Detector."
[
	FuncTankName(target_destination) : "Func_Tank Entity" : : "Name of the func_tank that will be told to look at the ping location when detected."
	TeamToLookAt(choices) : "Player to Observe" : 2 : "Which player's pings to look at." =
	[
		1 : "Both"
		3 : "ATLAS"
		2 : "P-Body"
	]
	Enabled(choices) : "Default State" : 1 : "Is this entity enabled by default or not?" =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	
	input Enable(void) : "Starts listening for pings and will fire outputs when found."
	input Disable(void): "Disable this entity from listening for pings."
	input Toggle(void): "Toggle from Enabled to Disabled and vice versa."
	
	output OnPingDetected(void) : "Fired when a ping is detected."
]

@SolidClass base(Trigger) = func_placement_clip : "Specifies a region where things cannot be built."
[
]

//-------------------------------------------------------------------------
//
// NPCs
//
//-------------------------------------------------------------------------

@FilterClass base(BaseFilter) color(0 255 0) iconsprite("editor/filter_held.vmt") = filter_player_held :
	"A filter that only accepts objects held by the player."
[
]

@PointClass base(Targetname, Angles, Parentname, Reflection, ToggleDraw, RenderFields) studioprop() = env_portal_laser : 
" A Thermal Discouragement Beam that will move through portals, redirect using Redirection Cubes and reflect off of Reflection Gel."
[
	NoPlacementHelper(boolean) : "No placement helper" : 0 : "Don't automatically create a portal placement helper at the end of the laser."
	model(studio) : "Laser Position" : "models/props/laser_emitter_center.mdl"
	
	StartState(choices) : "Start off?" : 0 =
	[
		1 : "Yes"
		0 : "No"
	]
	
	LethalDamage(choices) : "Lethal" : 0 : "Instant kill on contact. Buggy when rediected through cubes/portals." =
	[
		0 : "Non-lethal"
		1 : "Lethal"
	]
	
	AutoAimEnabled(boolean) : "Should auto aim" : 1 : "Allow the laser to bend to activate catchers or relays."

	skin(choices) : "Skin Type" : 0 =
	[
		0 : "Clean"
		1 : "Rusted"
	]

	input Toggle( void ) : "Toggle the laser on and off."
	input TurnOn( void ) : "Turn the laser on."
	input TurnOff( void ) : "Turn the laser off."
]


@PointClass base(Targetname)
	studio("models/editor/axis_helper.mdl")
	iconsprite("editor/point_laser_target.vmt") = point_laser_target : 
"Invisible Discouragement Beam detector, for logic use. The entity will fire outputs when struck and unstruck."
[
	terminalpoint(boolean) : "Terminal Point" : 1 : "Will lasers auto-aim towards this? It may also make the laser stop here."

	output OnPowered(void) : "Fired when a laser hits the target."
	output OnUnpowered(void) : "Fired when a laser has stopped hitting the target."
]

@PointClass base(Targetname, Angles, Parentname, Reflection, ToggleDraw, RenderFields) studioprop() = prop_laser_catcher: 
"Discouragement Beam Catcher that detects a laser, absorbing the beam. The entity will fire outputs when struck and unstruck."
[
	SkinType(choices) : "Skin Type" : 0 : "Set the type of catcher to use." =
	[
		0 : "Clean"
		1 : "Rusted"
	]
	
	skin(choices) : "[H] Skin Type" : 0 : "The skin to show in Hammer." =
	[
		0 : "Clean  - Off"
		1 : "Clean  - On"
		2 : "Rusted - Off"
		3 : "Rusted - On"
	]
	
	model(choices) : "Laser Catcher Model" : "models/props/laser_catcher_center.mdl" : "Is the catcher offset? (You can also add a custom model here.)" =
	[
		"models/props/laser_catcher_center.mdl" : "Centered"
		"models/props/laser_catcher.mdl" 		: "Offset"
	]
	output OnPowered(void) : "Fired when a laser hits the target."
	output OnUnpowered(void) : "Fired when a laser has stopped hitting the target."
]

@PointClass base(Targetname, Angles, Parentname, Reflection, ToggleDraw, RenderFields) studioprop() = prop_laser_relay : "Discouragement Beam Relay that detects lasers, whilst allowing it to pass through and hit other Relays. The entity will fire outputs when struck and unstruck."
[
	model(studio) : "Laser Relay Model" : "models/props/laser_receptacle.mdl" : "Choose a custom model for the relay."
	output OnPowered(void) : "Fired when a laser hits the target."
	output OnUnpowered(void) : "Fired when a laser has stopped hitting the target."
]

@PointClass base(Targetname, Angles, Reflection, ToggleDraw, RenderFields) studioprop() = prop_weighted_cube : "Aperture Science Weighted Cube. Presses floor buttons, and can be moved around."
[
	skin(integer) : "Skin (OLD)" : 0 : "The old skin property, mainly to show in Hammer. "

	CubeType(choices) : "Cube Type" : 0 : "What cube type is this? Use a prop_monster_box for FrankenTurrets. If set to Custom, use AddOutput to change it back OnMapSpawn so gel skins behave correctly." =
	[
		0 : "[0] Weighted Storage Cube"
		1 : "[1] Weighted Companion Cube"
		2 : "[2] Weighted Pivot Cube"
		3 : "[3] Edgeless Safety Cube"
		4 : "[4] Antique Storage Cube"
		6 : "Custom model"
	]

	SkinType(choices) : "Skin Type" : 0 : "Is the cube clean or rusty? Storage and Pivot cubes are the only types with a rusty version." =
	[
		0 : "Clean"
		1 : "Rusted"
	]
	
	model(studio) : "[H] Model" : "models/props/metal_box.mdl" : "The model to show in Hammer."
	PaintPower(choices) : "Starting paint" : 4 : "The cube starts painted with the set gel." =
	[
		0 : "Repulsion Gel"
		1 : "Adhesion Gel"
		2 : "Propulsion Gel"
		3 : "Conversion Gel"
		4 : "None"
	]
	
	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into a floor portal."

	NewSkins(integer) readonly : "Use new skins" : 1 : "Use the values in the Cube Type and Skin Type fields instead of the Skin(OLD) field. You shouldn't need to touch this."

	input  EnablePortalFunnel(void) : "Enable portal funneling behavior."
	input  DisablePortalFunnel(void) : "Disable portal funneling behavior."
	input  EnableMotion(void) : "Allow physics simulation."
	input  DisableMotion(void) : "Prevent Physics simulation, freezing the cube in place."

	input  Dissolve(void) : "Fizzles the cube, firing the OnFizzled output."
	input  SilentDissolve(void) : "Kills the cube immediately and fires its OnFizzled output."
	//input  PreDissolveJoke(void) : "(Non-functional) GLaDOS make a joke about the cube."
	input  ExitDisabledState(void) : "Exits the disabled state of a reflective cube."
	output OnFizzled(void) : "Fired when a cube is fizzled."
	output OnOrangePickUp(void) : "P-Body picked up the cube."
	output OnBluePickUp(void) : "ATLAS picked up the cube."
	output OnPlayerPickup(void) : "Any player picked up the cube."
	output OnPhysGunDrop(void) : "Any player dropped the cube."
	output OnPainted(void) : "Cube got painted, only if the state changed."
]

@SolidClass base(Trigger) line(255 255 0, targetname, launchTarget) = trigger_catapult : "Catapult the player in a given direction at a given velocity."
[
	playerSpeed(float) : "Player Speed" : 450 : "Speed at which to launch the players (u/sec)"
	physicsSpeed(float) : "Physics Object Speed" : 450 : "Speed at which to launch physics objects (u/sec)"
	launchDirection(angle) : "Launch direction" : "0 0 0" : "Direction to launch the player in."
	launchTarget(target_destination) : "Launch target" : "" : "Entity to try to 'hit' when we're launched."
	useExactVelocity(boolean) : "Use Exact Velocity" : 0 : "Try to fling exactly at the speed specified - this prevents the added upward velocity from a launch target."
	exactVelocityChoiceType(choices) : "Exact Solution Method" : 0 : "Using exact velocity generates two correct solutions. Use this to force which one you choose." =
	[
		0 : "Best"
		1 : "Solution One"
		2 : "Solution Two"
	]
	applyAngularImpulse(boolean) : "Apply angular impulse" : 1 : "Physics objects that are catapulted will get random rotational force"
	AirCtrlSupressionTime(float) : "Air Control SupressionTime" : "-1.0" : "[Launch by target only!]If greater than zero, suppress player aircontrol for this number (in seconds). If less than zero use the default (quarter second)."
	useThresholdCheck(boolean) : "Use Threshold Check" : 0 : "Use the Lower and Upper Threshold to only trigger when the object is moving at a certain speed already."
	onlyVelocityCheck(boolean) : "Only check velocity" : 0 : "Only check velocity of the touching object - don't actually catapult it.  Use in conjunction with OnCatapulted to create velocity checking triggers.  Only works when Use Threshold Check is enabled."
	lowerThreshold(float) : "Lower Threshold" : "0.15" : "Flung object must be within this percentage value in order to activate fling. Specify a value between [0...1] (default is .15) This is only used if Use Threshold Check is set to yes."
	upperThreshold(float) : "Upper Threshold" : "0.30" : "Flung object must be within this percentage value in order to activate fling. Specify a value between [0...1] (default is .30) This is only used if Use Threshold Check is set to yes."
	entryAngleTolerance(float) : "Entry Angle Tolerance" : "0.0" : "Flung object's velocity must be pointing this much at the target. Specify a value between [-1...1] 1 means exactly, 0 means within 180 degrees -1 means any angle is accepted. This is only used if Use Threshold Check is set to yes."

	output OnCatapulted(void) : "The object has been launched, or passes the Threshold Check and Entry Angle Tolerance."
]

// --------------
//  FUTBOLS
// --------------
@PointClass base(BasePropPhysics) studioprop("models/props/futbol.mdl") line(255 255 0,targetname, spawnername) = prop_glass_futbol : "A fragile glass ball that the player can pick up and toss. On contact with surfaces it will shatter, and it can be put into holders to power them. It is affected by gel, but the shattering means this has little effect."
[
	SpawnerName(target_destination)		: "Spawner Name" : "" : "Name of prop_glass_futbol_spawner for this futbol to respawn in once broken."
	output OnFizzled(void) : "Fired when the futbol is fizzled."
	output OnIgnite(void) : "Fired when sphere burns."

	input Dissolve(void) : "Dissolve"
	input RemovePaint(void) : "Remove Paint"
]

@PointClass base(Targetname) studioprop( "models/props/futbol_dispenser.mdl" ) = prop_glass_futbol_spawner : "Spawns futbols. Will re-create a futbol when its created futbol breaks."
[
	StartWithFutbol(boolean) : "Start with Futbol" : "1" : "Set true if this spawner starts with a futbol in it. Set to false if this spawner's futbol will be manually placed in the map."

	// Inputs
	input ForceSpawn(void)	: "Spawns a new futbol. Usually isn't necessary, because futbols respawn automatically if broken."
	
	// Outputs
	output OnFutbolSpawned(void) : "Created a new futbol."
	output OnFutbolGrabbed(void) : "Player has taken the futbol out of this spawner."
]

@PointClass base(Targetname) studio( "models/editor/angle_helper.mdl" ) = prop_glass_futbol_socket : "Invisible entity that holds futbols and fires an output. When a futbol comes close it will snap into place."
[
	// Outputs
	output OnFutbolReleased(void) : "Player has taken the futbol out of this socket."
	output OnFutbolCaught(void)	: "This socket has captured a futbol."
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/angle_helper.mdl") = point_futbol_shooter : 
	"Fires prop_exploding_futbols at a target entity. Used in Wheatley's boss fight."
[
		input SetTarget(target_destination) : "Set new launch target"
		input ShootFutbol(void) : "Shoot a futbol at the target"
		
		output OnShootSuccess(void) : "Called when a futbol is successfully fired."
		output OnShootFail(void) : "Called when a futbol fails to fire."
		
		launchSpeed(float) : "Launch speed" : "100" : "Speed to launch the futbol."
]

@PointClass base(BasePresetPropPhysics) studioprop( "models/npcs/personality_sphere_angry.mdl" ) = prop_exploding_futbol : "The bombs used by Wheatley."
[
	ExplodeOnTouch(boolean) : "Explode on touch" : "1" : "If the bomb should explode when it touches something."	
	input Explode(void) : "Explodes the bomb."
]

@PointClass base(prop_glass_futbol, prop_exploding_futbol) studioprop("models/props/futbol.mdl") line(255 255 0,targetname, spawnername) = hot_potato : "This uses the futbol model. It can be carried around, but on impact it explodes, similar to prop_exploding_futbols."
[
]

@PointClass base(prop_glass_futbol_socket) studio( "models/editor/axis_helper.mdl" ) = hot_potato_socket : "Catches (bombs?) and fires an output."
[
]

@PointClass base(prop_glass_futbol_spawner) studioprop("models/props/futbol_dispenser.mdl") = hot_potato_spawner : "Catches 'hot potatos' and fires an output."
[
]

@PointClass base(prop_glass_futbol_socket) studio( "models/editor/axis_helper.mdl" ) = hot_potato_catcher : "Catches 'hot potatos' and fires an output."
[
]


@PointClass base(Targetname) = portalmp_gamerules : "Proxy entity for Portal 2 Gamerules. Appears nonfunctional."
[	
	input AddRedTeamScore(integer) : "Add to P-Body's score (can be a negative number)"
	input AddBlueTeamScore(integer) : "Add to ATLAS's score (can be a negative number)"
]

@PointClass base(Parentname, Targetname, Angles) studioprop("models/effects/cappoint_hologram.mdl") = item_nugget : "Aperture Incentivizing Nugget. Useless."
[
	GroupName(string) : "Group Name" : "" : "Giving nuggets a group name hints the game that they are intended to be a group"
	RespawnTime(float) : "Respawn Time" : 30 : "Number of seconds between when a nugget is collected and when it respawns"
	PointValue(choices) : "Point Value" : 1 =
	[
		1 : "1"
		5 : "5"
		10 : "10"
		25 : "25"
	]
]

@SolidClass base(func_portal_detector) = func_portalled : "Fires outputs when an entity teleports through a portal in its volume."
[
	FireOnDeparture(boolean) : "Fire On Departure" : 1 : "Fire when the entity is entering this portal."
	FireOnArrival(boolean) : "Fire On Arrival" : 1 : "Fire when the entity is exiting this portal."
	FireOnPlayer(boolean) : "Player" : 1 : "Fire when a player has portalled."
	
	output OnEntityPrePortalled(void)	: "Fires when the entity is about to portal."
	output OnEntityPostPortalled(void)	: "Fires when the entity is done portalling."
]

@PointClass base(Targetname) color(0 100 250) iconsprite("editor/logic_timescale.vmt") = logic_timescale : "Changes the server's timescale."
[
	BlendTime(float) : "Blend Time" : 0 : "The amount of time it takes to ramp to the desired timescale when triggered."
	input SetDesiredTimescale(float) : "Sets the desired timescale and starts slowing time (will blend to desired using the specified blend time)."
	input SetTimescaleBlendTime(float) : "Set the amount of time that it takes to ramp to the desired timescale when triggered."
]

@PointClass base(Targetname) = env_player_viewfinder : "When enabled, the viewfinder screen overlay will turn on, like when gesturing to cameras. Applies to both Coop players."
[
	input ShowViewFinder(void) : "Shows the view finder screen overlay."
	input HideViewFinder(void) : "Hides the view finder screen overlay."
]

@PointClass base(Targetname, PlayerClass, Angles) studioprop("models/editor/playerstart.mdl") = info_coop_spawn : "Player spawns for cooperative mode."
[
	Enabled(choices) : "Initial State" : 0 =
	[
		0 : "Disabled"
		1 : "Enabled"
	]
	
	StartingTeam(choices) : "Player" : 0 : "Which player to spawn." =
	[
		0 : "Any"
		2 : "P-Body"
		3 : "ATLAS"
	]
	
	ForceGunOnSpawn(boolean) : "Force Gun On Spawn" : 0 : "Give the player a Portal Gun on spawn."
	
	input Enable(void) : "Enable the spawn point to be used."
	input SetAsActiveSpawn(void) : "Enable the spawn point to be used, disabling all other spawn points that do not share the same name."
	input Disable(void) : "Disable the spawn point from being used."
	input SetTeam(integer) : "Set the player this spawn point is for - 0 and 1 are any player, 2 is P-Body, 3 is ATLAS."
]

@PointClass base(TalkNPC,Parentname) studioprop() = npc_personality_core : "Aperture Science Personality Construct. Animated balls with handles."
[
	ModelSkin(choices) : "Model Skin" : 0 : "If using the 'alt' skin, this sets the eye color -- If not using the alt skin, (0 = broken) (1=normal)" =
	[
		0 : "Blue Eye / Broken"
		1 : "Green Eye / Normal"
		2 : "Red Eye / NA"
		3 : "Purple Eye / NA"
	]

	altmodel(choices) : "Use Alternate Skins" : 0 : "Use the model with corrupted skins, instead of the skins in the original model. " =
	[
		0 : "No"
		1 : "Yes"
	]
	
	model(choices) : "[H] Model" : "models/npcs/personality_sphere/personality_sphere.mdl" : "Choose the model to show in hammer. Set to the same as Use Alternate Skins." =
	[
		"models/npcs/personality_sphere/personality_sphere.mdl" : "Original (Wheatley)"
		"models/npcs/personality_sphere/personality_sphere_skins.mdl" : "Alternate (Corrupt Cores)"
	]
	
	skin(choices) : "[H] Skin" : 0 : "If using the 'alt' skin, this sets the eye color (in hammer) -- If not using the alt skin, (0 = broken) (1=normal)" =
	[
		0 : "Blue Eye / Broken"
		1 : "Green Eye / Normal"
		2 : "Red Eye / NA"
		3 : "Purple Eye / NA"
	]
	
	output OnPlayerPickup(void) : "Fired whenever the player picks up the core."
	output OnPlayerDrop(void) : "Fired whenever the player drops the core."
	
	input EnableMotion(void) : "Enable physics motion/collision response."
	input DisableMotion(void) : "Disable physics motion/collision response."

	input EnableFlashlight(void) : "Enable the eye flashlight."
	input DisableFlashlight(void) : "Disable the eye flashlight."
	
	input ForcePickup(void) : "Force the player to pickup the sphere immediately."
	input EnablePickup(void) : "Allow player pickup."
	input DisablePickup(void) : "Disable player pickup."
	
	input PlayAttach(void) : "Play the attachment animation, used for syncing with the socket's animation."
	input PlayDetach(void) : "Play the detachment animation, used for syncing with the socket's animation."
	input PlayLock(void) : "Play the locking animation, used for syncing with the socket's animation."
	
	input SetIdleSequence(string) : "Set a sequence to use as an idle sequence."
	input ClearIdleSequence(void) : "Return to the default idle animation."

	input Explode(void) : "Explode the sphere, triggering an explosion effect and some gibs."
]

@PointClass base(Targetname, Angles, Parentname, RenderFields, ToggleDraw) studioprop() = prop_monster_box : "FrankenCubes, they walk about when oriented correctly but otherwise behave like normal Storage Cubes."
[
	StartAsBox(boolean) : "Start As Box" : 0 : "Start as an Box."
	BoxSwitchSpeed(float) : "Box Switch Speed" : 400 : "Speed to force switch to a box."
	AllowSilentDissolve(boolean) : "Allow SilentDissolve input" : 0 : "Allow the SilentDissolve input to dissolve this FrankenCube."
	
	model(choices) : "[H] Pose" : "models/npcs/monsters/monster_a.mdl" : "What pose to show in Hammer." =
	[
		"models/npcs/monsters/monster_a.mdl" : "Extended"
		"models/npcs/monsters/monster_a_box.mdl" : "Cube"
	]
	
	input BecomeBox(string) : "Force the FrankenTurret to switch to cube form."
	input BecomeMonster(void) : "Return the FrankenCube to extended form."
	input BecomeShortcircuit(void) : "Short circuit this FrankenCube and permanently switch to cube form. Creates arc particles randomly across the cube, and the turret's eyes flicker randomly."
	
	input  Dissolve(void) : "Fizzles the FrankenCube."
	input  SilentDissolve(void) : "Kills the FrankenCube and fires its OnFizzled output, if the relevant setting is on."
	output OnFizzled(void) : "Fired when the FrankenCube gets fizzled."
]

@PointClass base(Targetname, Parentname, Angles) studioprop("models/editor/prop_indicator_panel.mdl") line(255 255 0, targetname, IndicatorLights) = prop_indicator_panel : "Indicator signs for the end of modern antlines. Shows either a tick/cross, or a circular countdown. Can also function as a env_texturetoggle for indicator lights."
[
	TimerDuration(float) : "Timer Duration" : 0 : "Amount of time the counter will count down"
	Enabled(boolean) : "Start visible?" : 1 : "Appears non-functional."
	IsTimer(choices) : "Starting State" : 0 : "Does this start as a checkmark or countdown display?" =
	[
		0 : "Checkmark"
		1 : "Timer"
	]
	IsChecked(choices) : "Starts checked?" : 0 : "If this is a checkmark sign, whether this starts checked or not." =
	[
		0 : "No"
		1 : "Yes"
	]

	IndicatorLights(target_destination) : "Indicator Lights" : "" : "If supplied, assumes this is a group of indicators lights to toggle when the indicator is toggled."
	
	skin (choices) : "[H] Skin" : 0 : "What kind of indicator to show as in Hammer" =
	[
		0 : "Check"
		1 : "Cross"
		2 : "Timer"
	]

	input Check(void) : "Sets the indicator state to be 'checked', switching the screen to tick/cross mode."
	input Uncheck(void) : "Sets the indicator state to be 'unchecked'."

	input Start(void) : "Start counting down, switching the screen to timer mode."
	input Stop(void) : "Stop the counter at its current value."
	input Reset(void) : "Reset the timer back to its default value."
]

@PointClass base(Targetname, Parentname, Angles) studioprop("models/editor/prop_indicator_panel.mdl") = prop_tic_tac_toe_panel : "Unknown use, likely for some kind of ping detector."
[
	output OnPlayer1Pinged(void) : "Fired if pinged by Player 1."
	output OnPlayer2Pinged(void) : "Fired if pinged by Player 2."
]

@SolidClass base(Trigger) = trigger_playerteam : "Allows distinguishing which player touched the trigger. Use with a logic_coop_manager to detect when both players are inside."
[
	target_team(choices) : "Target Player" : 0 : "Which player (or both) to allow to touch this trigger." =
	[
		0 : "Both"
		3 : "ATLAS"
		2 : "P-Body"
	]	

	trigger_once(boolean) : "Trigger Once" : "No" : "Only trigger once, then remove the trigger."

	output OnStartTouchBluePlayer(void) : "ATLAS has started touching the trigger."
	output OnEndTouchBluePlayer(void) : "ATLAS has stopped touching the trigger."
	output OnStartTouchOrangePlayer(void) : "P-Body has started touching the trigger."
	output OnEndTouchOrangePlayer(void) : "P-Body has stopped touching the trigger."
]

@SolidClass base(Targetname) = trigger_ping_detector : "Detects whether a player has pinged in its region."
[
	output OnOrangePlayerPinged(void) : "Fired when P-Body has pinged inside the trigger."
	output OnBluePlayerPinged(void) : "Fired when ATLAS has pinged inside the trigger."
]

@PointClass base(Targetname) iconsprite("editor/info_landmark") = info_landmark_entry : "Entry landmark"
[
]

@PointClass base(Targetname) iconsprite("editor/info_landmark") = info_landmark_exit : "Exit landmark"
[
]

@PointClass base(Targetname) iconsprite("editor/game_end.vmt") = point_changelevel : "Level Change Entity"
[
	input ChangeLevel(string) : "Changes the level to the map name supplied as a parameter."
	output OnChangeLevel(void) : "Fired when the level is about to change."
]

@PointClass base(Targetname, Parentname, Angles, BaseProjector, Reflection, Shadow, ToggleDraw, RenderFields) studioprop() = prop_tractor_beam : "Emitter for an Excursion Funnel."
[
	linearForce(choices) : "Funnel Direction" : 250 : "Speed of the Funnel, positive is forward. Defaults to 250/-250." =
		[
			250 : "Forward / Blue"
			-250 : "Reversed / Orange"
		]
	noemitterparticles(boolean) : "Disable Emitter Particles" : 0 : "Disable the whirly particles on the emitter."
	input SetLinearForce(float) : "Set the speed of the Funnel, and therefore the direction."
	use128model(choices) : "Model" : 0 : "Which model should this use?" =
	[
		0 : "192 Model"
		1 : "128 Model (PeTI)"
	]
	model(choices) : "[H] Model" : "models/props/tractor_beam_emitter.mdl" : "Sets the model to appear as in Hammer." =
    [   
		"models/props/tractor_beam_emitter.mdl" : "192 Model"
		"models/props_ingame/tractor_beam_128.mdl" : "128 Model (PeTI)"
	]
]

@PointClass base(Targetname, Parentname, Angles, BasePaintType) 
	line(255 255 255, targetname, light_position_name) 
	studio("models/editor/info_paint_sprayer.mdl") = info_paint_sprayer : "An entity that sprays Gel."
[
	//Paint sprayer
	maxblobcount(integer) : "Max number of blobs" : 250 : "Max number of blobs that sprayer can spawn in the world (1-250)."
	light_position_name(target_destination) : "Light Position Name" : : "Name of the entity we want to use as blobs light position."
	start_active(boolean) : "Start Active?" : 0
	silent(boolean) : "Silent?" : "0" : "If this flag is true, blobs will only paint, appearing entirely invisible."
	DrawOnly(boolean) : "DrawOnly?" : "0" : "If this flag is true, blobs will only render, vanishing on contact with surfaces."
	
	RenderMode(choices) : "Render Mode" : 0 : "The mode to render blobs. Appears non-functional." = 
	[
		0 : "Blobulator"
		1 : "Fast Sphere"
	]
	
	AmbientSound(choices) : "Ambient Sound" : 0 : "The sound to play when paint is flowing." =
	[
		0 : "None (silent)"
		1 : "Drip"
		2 : "Medium Flow"
		3 : "Heavy Flow"
	]
	
	blobs_per_second(float) : "Blobs per second" : "1" : "The number of paint blobs sprayed per second."
	min_speed(float) : "Min blob speed" : "100" : "The minimum speed of the sprayed blobs."
	max_speed(float) : "Max blob speed" : "100" : "The maximum speed of the sprayed blobs."
	blob_spread_radius(float) : "Blob spread radius" : "0" : "The starting radius of the spread of the blobs."
	blob_spread_angle(float) : "Blob spread angle" : "0" : "The spread of the blobs along its direction vector (in degrees)."
	blob_streak_percentage(float) : "Blob streak percentage" : "0" : "The percentage of blobs that will streak (0 - 100)."
	min_streak_time(float) : "Blob min streak time" : "0.2" : "The minimum time that the blobs will streak for."
	max_streak_time(float) : "Blob max streak time" : "0.5" : "The maximum time that the blobs will streak for."
	min_streak_speed_dampen(float) : "Blob min streak speed dampen" : "500" : "The minimum speed dampening while streaking."
	max_streak_speed_dampen(float) : "Blob max streak speed dampen" : "1000" : "The maximum speed dampening while streaking."
	start_radius_min(float) : "Min blob start size" : "0.5" : "The minimum start size of the sprayed blobs."
	start_radius_max(float) : "Max blob start size" : "0.7" : "The maximum start size of the sprayed blobs."
	end_radius_min(float) : "Min blob end size" : "0.5" : "The minimum end size of the sprayed blobs."
	end_radius_max(float) : "Max blob end size" : "0.7" : "The maximum end size of the sprayed blobs."
	radius_grow_time_min(float) : "Min grow time" : "0.5" : "The minimum time to grow from start to end size."
	radius_grow_time_max(float) : "Max grow time" : "1" : "The maximum time to grow from start to end size."

	input Start(void) : "Start shooting Gel."
	input Stop(void) : "Stop shooting Gel."
	input ChangePaintType(integer) : "Change the type of Gel being sprayed. Values between 0-4, higher values are unstable."
]

@PointClass base(Targetname,Angles, BasePaintType)
	studio("models/editor/prop_paint_bomb.mdl") = prop_paint_bomb : "Large blob of gel which explodes on impact. Respawn with a point_template."
[
	BombType(choices) : "Bomb Type" : 0 : "The type of explosion." = 
	[
		0 : "Dry Bomb"
		1 : "Wet Bomb"
	]

	allowfunnel(boolean) : "Allow Portal Funneling" : 1 : "Whether or not this object should auto-funnel into a portal."
	AllowSilentDissolve(boolean) : "Allow SilentDissolve input" : 0 : "Allow the SilentDissolve input to dissolve this bomb."
	
	playspawnsound(boolean) : "Play Spawn Sound" : 1 : "Whether or not this bomb should play a sound on spawn (PaintBlob.Inception)."
	
	model(string) readonly: "Model" : "models/error.mdl" : "Paint bombs need a model set to suppress a warning message. This model would be loaded already."

	input  Dissolve(void) : "Dissolves the paint bomb."
	input  SilentDissolve(void) : "Kills the paint bomb and fires its OnFizzled output."
	input  EnablePortalFunnel(void) : "Enable portal funneling behavior."
	input  DisablePortalFunnel(void) : "Disable portal funneling behavior."
	
	output OnFizzled(void) : "Fired when a paint bomb is fizzled (by trigger_paint_cleanser?)."
	output OnExploded(void) : "Fired when a paint bomb explodes."
]

@SolidClass base(Trigger, Targetname) = trigger_paint_cleanser : 
	"A trigger volume that erases any gel within it. Will destroy prop_paint_bombs and info_paint_sprayer gel, but will not stop gel from streaking under it. It will also clean physics objects like cubes or turrets that touch it. Likely intended to be used with paint_cleanser particle effect (like P1 fizzlers, but red)."
[
]

@PointClass base(Targetname, Angles) studioprop("models/props/stopwatch_finish_line.mdl") = portal_race_checkpoint : "Checkpoint for race maps."
[
	ResetTime(float) : "Reset Time" : "5.0" : "The time it takes for the checkpoint to reset after activation"
	
	skin(integer) readonly: "<Skin>" : 3 : "Ignore, needed to make the skin lit."
	
	output OnCheckpointActivated(void) : "Fired when the checkpoint is activated by the player."
	output OnCheckpointReset(void) : "Fired when the checkpoint is reset after being activated by the player."
	
	input Activate(void) : "Activates the checkpoint."
	input CancelActivate(void) : "Cancels the checkpoint's activated state."
	input Lock(void) : "Locks the checkpoint from being activated."
	input Unlock(void) : "The checkpoint can be activated."
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/vgui_arrows.mdl") = vgui_level_placard_display :
"Pre-level display placard entity."
[
]

@PointClass base(Targetname, Parentname, Angles) studio("models/editor/vgui_arrows.mdl") = vgui_mp_lobby_display :
"VGUI entity to display Coop levels in the Hub."
[
]

@PointClass base(Targetname, Angles) studio("models/editor/cone_helper.mdl") sphere(radius) sphere(inner_radius) frustum(influence_cone, inner_radius, radius, 255 255 255 10,-1) = point_push: "Pulls objects to, or pushes them away from a point. If a portal is placed nearby, it will transfer the suction and produce a 'broken_tube_suck' effect for Diversity Vents."
[
	spawnflags(Flags) = 
	[
		1 : "Test LOS before pushing" : 0
		2 : "Use angles for push direction" : 0
		4 : "No falloff (constant push at any distance)" : 0
		8 : "Push players" : 1
		16 : "Push physics" : 1
	]
	
	enabled(boolean) : "Start Enabled"	: 1
	
	magnitude(float) : "Magnitude" : 100 : "How strongly to push away from the center."
	radius(float) : "Radius" : 128 : "Radius to affect items in."
	inner_radius(float) : "Inner radius" : "0" : "If not zero, the LOS is calculated from a point intersecting this sphere."
	influence_cone(float) : "Cone of Influence" : "0" : "If greater than zero, the cone (in degrees) within which the object must lie for it to be affected."

	input Enable(void) : "Enable the push."
	input Disable(void): "Disable the push."
]

@PointClass base(prop_physics) sphere(fademindist) sphere(fademaxdist) studioprop() = prop_physics_paintable :
	"A version of prop_physics that can be painted by Gel. Does not appear to show up on the model."
[
	PaintPower(choices) : "Paint Power" : 4 : "The starting gel type for the prop." =
	[
		0 : "Repulsion Gel"
		1 : "Adhesion Gel"
		2 : "Propulsion Gel"
		3 : "Conversion Gel"
		4 : "None"
	]
]

@PointClass base(Targetname) color(0 100 250)  iconsprite("editor/logic_coop_manager.vmt") = logic_coop_manager :
	"Manages two sets of values and can fire outputs based on the state of those values. " +
	"Useful in coop where you can have players independently setting states on buttons, switches, etc."
[
	// keys
	DefaultPlayerStateA(choices) : "Default State A" : 0 : "The default state of A" = 
	[
		0 : "False"
		1 : "True"
	]
	DefaultPlayerStateB(choices) : "Default State B" : 0 : "The default state of B" = 
	[
		0 : "False"
		1 : "True"
	]
	
	// Inputs
	input SetStateATrue(void) : "Set A to TRUE"
	input SetStateBTrue(void) : "Set B to TRUE"
	input SetStateAFalse(void) : "Set A to FALSE"
	input SetStateBFalse(void) : "Set B to FALSE"
	input ToggleStateA(void) : "Toggle A"
	input ToggleStateB(void) : "Toggle B"

	// Outputs
	output OnChangeToAllTrue(void) : "Fires when ALL of the values change to TRUE for the first time"
	output OnChangeToAnyTrue(void) : "Fires when ANY of the values change to TRUE for the first time"
	output OnChangeToAllFalse(void) : "Fires when ALL of the values change to FALSE for the first time"
	output OnChangeToAnyFalse(void) : "Fires when ANY of the values change to FALSE for the first time"
]


@PointClass 
	base(Targetname, Parentname, Angles) 
	studioprop("models/props/portal_door_combined.mdl") 
	line(255 255 0, targetname, areaPortalWindow) 
	line(255 255 0, targetname, lightingorigin)
	sphere(AreaPortalFadeStart)
	sphere(AreaPortalFadeEnd)
	= prop_testchamber_door : "Portal Door."
[
	lightingorigin(target_destination) : "Lighting Origin" : "" : "Select an info_lighting to specify a location to sample lighting from for all gibs spawned by this shooter, instead of their own origins."

	AreaPortalWindow(target_destination) : "Area Portal Window Name" : "" : "The name of an area portal window that is controlled by the door."
	UseAreaPortalFade(boolean) : "Fade Area Portal?" : 0 : "If the area portal should use the specified fade distances to fade out."
	AreaPortalFadeStart(float) : "Fade Start Distance" : 0 : "The distance at which the area portal starts fading out."
	AreaPortalFadeEnd(float) : "Fade End Distance" : 0 : "The distance at which the area portal turns completely opaque."

	input Open(void) : "Open the door and cause the portal to activate."
	input Close(void) : "Close the door and cause the portal to deactivate."
	input Lock(void) : "Locking a door will prevent the Open or Close inputs from doing anything."
	input Unlock(void) : "If locked, unlocking a door will allow the Open or Close inputs to function."

	output OnOpen(void) : "Called when the door has started its open animation."
	output OnClose(void) : "Called when the door has started its close animation."
	output OnFullyOpen(void) : "Called when the door has finished its open animation."
	output OnFullyClosed(void) : "Called when the door has finished its close animation."
]

@PointClass base(BaseNPC, Parentname, RenderFields, Shadow) studioprop() = npc_wheatley_boss : "Wheatley NPC stub"
[
	model(studio) : "Model" : "models/npcs/glados/glados_wheatley_boss_screen.mdl"
]


@PointClass base(Targetname) sphere(radius) studio("models/editor/cone_helper.mdl") = paint_sphere : "Paint brushes inside the sphere."
[
	paint_type(choices) : "Paint Type" : 0 : "The type of Gel created." = 
	[
		0 : "Repulsion Gel"
		1 : "Reflection Gel / Adhesion Gel"
		2 : "Propulsion Gel"
		3 : "Conversion Gel"
		4 : "Cleansing Gel"
	]
	radius(float) : "Radius" : "60.f" : "Radius of paint sphere"
	
	alpha_percent(float) : "Alpha Percent" : "1.0" : "Alpha percent to control the density of paint, the value must be between 0 to 1"
	
	input Paint(void) : "Apply paint with specified paint type inside the paint sphere"
]


@PointClass base(EnvGlobal) color(200 0 0) iconsprite("editor/env_global.vmt") = env_global : 
	"An entity to control a game-specific global states."
[
	globalstate(choices) : "Global State to Set" =
	[
		"portalgun_nospawn" : "Spawn without Portalgun"
		"no_pinging_blue" : "Prevent Pinging ATLAS"
		"no_pinging_orange" : "Prevent Pinging P-Body"
		"no_taunting_blue" : "Prevent Taunting ATLAS"
		"no_taunting_orange" : "Prevent Taunting P-Body"
	]
]


@PointClass base(targetname) = playtest_manager : "Nonexistent entity in PeTI."
[
	input StartRecording(void)
	input StopRecording(void)
]