// Extra entities implemented in VRAD transformations.
// These are removed or converted to other entities.

@BaseClass = StaticTargetName:
    "Just used to provide names for the compiler."
    [
    targetname(target_source) : "Name" : : "The name that other entities refer to this entity by. This may not be useable in all situations, since this entity is produced by the compiler."
    ]

@PointClass base(Angles) studioprop() = comp_precache_model:
    "Force a specific model to load, for runtime switching. Duplicates will be removed."
    [
    model(studio): "Model": : "The model to load."
    skin(integer): "Skin": : "Skin to show."
    ]

@PointClass size(-8 -8 -8, 8 8 8) = comp_pack:
    "Explicitly identify resources to pack into the map. If more are needed, add additional keyvalues with SmartEdit off."
    [
    generic1(string): "Generic" : : "Pack a file, starting in any of the content folders."
    generic2(string): "Generic" : : "Pack a file, starting in any of the content folders."
    generic3(string): "Generic" : : "Pack a file, starting in any of the content folders."
    generic4(string): "Generic" : : "Pack a file, starting in any of the content folders."
    generic5(string): "Generic" : : "Pack a file, starting in any of the content folders."
    
    sound1(sound): "Sound" : : "Pack a raw sound file or a soundscript."
    sound2(sound): "Sound" : : "Pack a raw sound file or a soundscript."
    sound3(sound): "Sound" : : "Pack a raw sound file or a soundscript."
    sound4(sound): "Sound" : : "Pack a raw sound file or a soundscript."
    sound5(sound): "Sound" : : "Pack a raw sound file or a soundscript."
    
    model1(studio): "Model" : : "Pack a model."
    model2(studio): "Model" : : "Pack a model."
    model3(studio): "Model" : : "Pack a model."
    model4(studio): "Model" : : "Pack a model."
    model5(studio): "Model" : : "Pack a model."
    
    material1(material): "Material" : : "Pack a material."
    material2(material): "Material" : : "Pack a material."
    material3(material): "Material" : : "Pack a material."
    material4(material): "Material" : : "Pack a material."
    material5(material): "Material" : : "Pack a material."

    particle1(particlesystem): "Particle" : : "Pack a particle system, and include in the manifest."
    particle2(particlesystem): "Particle" : : "Pack a particle system, and include in the manifest."
    particle3(particlesystem): "Particle" : : "Pack a particle system, and include in the manifest."
    particle4(particlesystem): "Particle" : : "Pack a particle system, and include in the manifest."
    particle5(particlesystem): "Particle" : : "Pack a particle system, and include in the manifest."
    ]

@PointClass size(-8 -8 -8, 8 8 8) = comp_pack_data:
    "Pack a file into the BSP, with custom contents. This should NOT be edited manaually." +
    "Data is stored as dataXXX keyvalues, with incremented hex digits. Each value is 192 base64 characters (using +/), and more keys may be used than the ones defined." +
    "No values may be skipped."
    [
    filename(string): "Filename": : "Filename to pack under."
    filetype(choices): "File Type": "GENERIC" : "File type to record it as." = [
        "GENERIC": "Generic"
        "SOUNDSCRIPT": "SoundScript file (add to manifest)"
        "PARTICLE_FILE": "Particle System (add to manifest)"
        "VSCRIPT_SQUIRREL": "VScript (Squirrel)"
        "MATERIAL": "Material"
        "TEXTURE": "Texture"
        "MODEL": "Model"
    ]

    data000(string) readonly: "000"
    data001(string) readonly: "001"
    data002(string) readonly: "002"
    data003(string) readonly: "003"
    data004(string) readonly: "004"
    data005(string) readonly: "005"
    data006(string) readonly: "006"
    data007(string) readonly: "007"
    data008(string) readonly: "008"
    data009(string) readonly: "009"
    data00a(string) readonly: "00A"
    data00b(string) readonly: "00B"
    data00c(string) readonly: "00C"
    data00d(string) readonly: "00D"
    data00e(string) readonly: "00E"
    data00f(string) readonly: "00F"
    // Code supports infinite number.
    ]

@PointClass base(StaticTargetName) iconsprite("editor/logic_relay.vmt") = comp_relay:
    "Simplified version of logic_relay which is able to be optimised away by the compiler."+
    "" +
    "The various inputs and outputs are useful for bundling commands together, or using more appopriate verbs." +
    "Inputs only work if given directly from entities (or via instance redirection), not ingame or dynamically."
    [
    input Trigger(void): "Trigger the relay and fire the output."
    
    input Enable(void): "Fire the OnEnabled output."
    input Disable(void): "Fire the OnDisabled output."
    
    output OnTrigger(void): "Fired when the input is triggered."
    output OnEnabled(void): "Fired when the input is enabled."
    output OnDisabled(void): "Fired when the input is disabled."
]
    
@PointClass base(StaticTargetName) iconsprite("editor/math_counter.vmt") = comp_calc:
	"Performs computations on entity values. Designed mainly for use in instances."
	[
	val1(string): "Value 1": "" 
	val1_type(choices): "Value 1 Type" : "int" : "Treat Value 1 as this type." = [
		"none" : "Unused"
		"int"  : "Integer"
		"float": "Floating-Point"
		"vec"  : "Vector"
	]
]

@PointClass base(StaticTargetName) iconsprite("editor/choreo_manager.vmt") = comp_choreo_sceneset:
    "Chains a set of choreographed scenes together."
[
    play_dings(boolean): "[Portal 2] Play Dings" : 1 : "Play the blip sounds at the start and end."
    delay(float): "Delay between each" : "0.1" : "Add a delay between each scene."
    only_once(boolean): "Clean up after starting" : 1 : "If set, Kill choreo scenes after starting so they only play once." +
    
    "If set, the Cancel input will not work properly."

	busyactor(choices) : "If an Actor is talking..." : 1 : "What to do if an actor this scene needs is already talking when this scene is told to start." =
	[
		0: "Start immediately"
		1: "Wait for actor to finish"
		2: "Interrupt at next interrupt event"
		3: "Cancel at next interrupt event"
	]

	onplayerdeath(choices) : "On player death" : 0 : "What should this entity do if the player dies" =
	[
		0 : "Do Nothing"
		1 : "Cancel Script and return to AI"
	]
    
    scene01(scene): "Scene 1" : ""
    scene02(scene): "Scene 2" : ""
    scene03(scene): "Scene 3" : ""
    scene04(scene): "Scene 4" : ""
    scene05(scene): "Scene 5" : ""
    scene06(scene): "Scene 6" : ""
    scene07(scene): "Scene 7" : ""
    scene08(scene): "Scene 8" : ""
    scene09(scene): "Scene 9" : ""
    scene10(scene): "Scene 10" : ""
    scene11(scene): "Scene 11" : ""
    scene12(scene): "Scene 12" : ""
    scene13(scene): "Scene 13" : ""
    scene14(scene): "Scene 14" : ""
    scene15(scene): "Scene 15" : ""
    scene16(scene): "Scene 16" : ""
    scene17(scene): "Scene 17" : ""
    scene18(scene): "Scene 18" : ""
    scene19(scene): "Scene 19" : ""
    scene20(scene): "Scene 20" : ""
    
    input Start(void): "Start the choreo sequence playing."
    input Cancel(void): "Stop the choreo sequence at any point."
    output OnStart(void): "Fired when the sequence starts."
    output OnFinish(void): "Fired when the sequence is complete."
]   

@SolidClass base(Targetname, Parentname, Origin, EnableDisable) = comp_trigger_p2_goo:
    "Implements Toxic Goo/Deadly Acid/Hazard Liquid." +
    "" +
    "This expands into a trigger_hurt and trigger_multiple with appropriate settings."
[
    
    failsafe_delay(float): "Failsafe delay": "1.0" : "Delay after which non-cube entities will be killed."
    dissolve_filter(filterclass): "Physics Filter" : : "Set to a filter entity to prevent certain entities from dissolving."
    
    output OnKillPlayer(void): "Fired when players touch the trigger."
    output OnDissolvePhysics(void): "Fired when physics objects touch the trigger (and will be dissolved/killed soon)."
]

@SolidClass base(trigger_playerteam) = comp_trigger_coop : 
	"Only activates once both Coop players have reached the trigger."
[
	output OnStartTouchBoth(void) : "Both players have entered the trigger."
	output OnEndTouchBoth(void) : "One player left the trigger."
]

@BaseClass = SRCIndicator: "Adds an Indicator Name option to toggle overlays."
[
    indicatorname(target_destination) : "Indicator Name" : : "Set to the name of a set of info_overlays to toggle when this is activated and deactivated. The name may also point to a prop_indicator_panel, which will also be toggled appropriately."
]
